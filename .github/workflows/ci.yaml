name: Dagger CI

on:
  workflow_dispatch:
    inputs:
      pipeline-options:
        description: "List of pipelines to run"
        default: "--all"
  pull_request:
jobs:
  dagger_ci:
    name: Dagger CI Job
    timeout-minutes: 240 # 4 hours
    runs-on: medium-runner
    steps:
      - name: Get start timestamp
        id: get-start-timestamp
        run: echo "::set-output name=start-timestamp::$(date +%s)"
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          repository: ${{ github.event.inputs.repo }}
          ref: ${{ github.event.inputs.gitref }}
      - name: Extract branch name
        shell: bash
        if: github.event_name == 'workflow_dispatch'
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract_branch
      - name: Install Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - name: Install pipeline dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry install
      - name: Run actions pipeline [WORKFLOW DISPATCH]
        if: github.event_name == 'workflow_dispatch'
        run: |
          export _EXPERIMENTAL_DAGGER_RUNNER_HOST="unix:///var/run/buildkit/buildkitd.sock"
          DAGGER_CLI_COMMIT="67c7e7635cf4ea0e446e2fed522a3e314c960f6a"
          DAGGER_TMP_BINDIR="/tmp/dagger_${DAGGER_CLI_COMMIT}"
          export _EXPERIMENTAL_DAGGER_CLI_BIN="$DAGGER_TMP_BINDIR/dagger"
          if [ ! -f  "$_EXPERIMENTAL_DAGGER_CLI_BIN" ]; then
              mkdir -p "$DAGGER_TMP_BINDIR"
              curl "https://dl.dagger.io/dagger/main/${DAGGER_CLI_COMMIT}/dagger_${DAGGER_CLI_COMMIT}_$(uname -s | tr A-Z a-z)_$(uname -m | sed s/x86_64/amd64/).tar.gz" | tar xvz -C "$DAGGER_TMP_BINDIR"
          fi
          poetry run python .pipelines/ci.py ${{ github.event.inputs.test-connectors-options }}
        env:
          GCP_GSM_CREDENTIALS: ${{ secrets.GCP_GSM_CREDENTIALS }}
          CI_GITHUB_ACCESS_TOKEN: ${{ secrets.GH_PAT_MAINTENANCE_OCTAVIA }}
          CI_GIT_BRANCH: ${{ steps.extract_branch.outputs.branch }}
          CI_GIT_REVISION: ${{ github.sha }}
          CI_CONTEXT: "manual"
          CI_PIPELINE_START_TIMESTAMP: ${{ steps.get-start-timestamp.outputs.start-timestamp }}
      - name: Run actions pipeline [PULL REQUESTS]
        if: github.event_name == 'pull_request'
        run: |
          export _EXPERIMENTAL_DAGGER_RUNNER_HOST="unix:///var/run/buildkit/buildkitd.sock"
          DAGGER_CLI_COMMIT="67c7e7635cf4ea0e446e2fed522a3e314c960f6a"
          DAGGER_TMP_BINDIR="/tmp/dagger_${DAGGER_CLI_COMMIT}"
          export _EXPERIMENTAL_DAGGER_CLI_BIN="$DAGGER_TMP_BINDIR/dagger"
          if [ ! -f  "$_EXPERIMENTAL_DAGGER_CLI_BIN" ]; then
              mkdir -p "$DAGGER_TMP_BINDIR"
              curl "https://dl.dagger.io/dagger/main/${DAGGER_CLI_COMMIT}/dagger_${DAGGER_CLI_COMMIT}_$(uname -s | tr A-Z a-z)_$(uname -m | sed s/x86_64/amd64/).tar.gz" | tar xvz -C "$DAGGER_TMP_BINDIR"
          fi
          poetry run python .pipelines/ci.py ${{ github.event.inputs.test-connectors-options }}
        env:
          GCP_GSM_CREDENTIALS: ${{ secrets.GCP_GSM_CREDENTIALS }}
          CI_GITHUB_ACCESS_TOKEN: ${{ secrets.GH_PAT_MAINTENANCE_OCTAVIA }}
          CI_GIT_BRANCH: ${{ github.head_ref }}
          CI_GIT_REVISION: ${{ github.event.pull_request.head.sha }}
          CI_CONTEXT: "pull_request"
          CI_PIPELINE_START_TIMESTAMP: ${{ steps.get-start-timestamp.outputs.start-timestamp }}
